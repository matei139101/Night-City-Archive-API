//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::Install;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "cyberware")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub description: String,
    pub cost: i32,
    pub humanity_loss_flat: i32,
    pub humanity_loss_formula: String,
    pub install: Option<Install>,
    pub cyberware_type_id: i32,
    pub required_option_slots: Option<i32>,
    pub required_foundational_cyberware_id: Option<i32>,
    pub available_option_slots: Option<i32>,
    pub source_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::RequiredFoundationalCyberwareId",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::cyberware_type::Entity",
        from = "Column::Id",
        to = "super::cyberware_type::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    CyberwareType,
    #[sea_orm(
        belongs_to = "super::source::Entity",
        from = "Column::SourceId",
        to = "super::source::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Source,
}

impl Related<super::cyberware_type::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CyberwareType.def()
    }
}

impl Related<super::source::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Source.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "Entity", def = "Relation::SelfRef.def()")]
    SelfRef,
    #[sea_orm(entity = "super::cyberware_type::Entity")]
    CyberwareType,
    #[sea_orm(entity = "super::source::Entity")]
    Source,
    #[sea_orm(entity = "Entity", def = "Relation::SelfRef.def().rev()")]
    SelfRefReverse,
}
