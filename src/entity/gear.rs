//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "gear")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub price: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::cyberware::Entity")]
    Cyberware,
    #[sea_orm(has_one = "super::items::Entity")]
    Items,
    #[sea_orm(has_one = "super::weapons::Entity")]
    Weapons,
}

impl Related<super::cyberware::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Cyberware.def()
    }
}

impl Related<super::items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Items.def()
    }
}

impl Related<super::weapons::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Weapons.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
